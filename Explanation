# ðŸŒ¦ Weather Data Management System (C++)

---

## 1. Introduction
This program is a *Weather Data Management System* implemented in *C++*.  
It uses an *Abstract Data Type (ADT)* called WeatherRecord and a *2D array (vector of vectors)* structure to store temperature records for different cities across different years.

The system allows the user to:
- Insert, delete, retrieve, and display weather records  
- Perform *row-major / column-major traversal*  
- Handle *sparse data*  
- Conduct *complexity analysis*  

---

## 2. WeatherRecord (ADT)
The WeatherRecord structure represents a single weather entry.  

It contains:
- *date* â†’ stores the date in DD/MM/YYYY format  
- *city* â†’ stores the city name  
- *temperature* â†’ stores the recorded temperature in Â°C  

If no record exists, the temperature is set to **-9999** as a sentinel value to indicate missing data.  

---

## 3. WeatherDataSystem (Class)
The WeatherDataSystem class manages the whole data storage and operations.  

*Private members:*
- numYears, numCities â†’ number of years and cities in the dataset  
- years[] â†’ vector storing year values (e.g., "2022", "2023")  
- cityNames[] â†’ vector storing city names  
- records[][] â†’ a 2D array (vector of vectors) where each cell holds a WeatherRecord  

*Helper functions:*
- getYearIndex(year) â†’ finds the index of a given year  
- getCityIndex(city) â†’ finds the index of a given city  

---

## 4. Functionalities Provided
The program provides a *menu-driven interface* with the following options:  

1. *Insert Weather Record (ADT)*  
   - User enters a date, city, and temperature  
   - The record is inserted into the correct year Ã— city position  

2. *Delete Weather Record (ADT)*  
   - User enters a date and city  
   - If a record exists, it is deleted (reset to default)  

3. *Retrieve Weather Record (ADT)*  
   - User enters a city and year  
   - The system prints the stored date, city, and temperature  

4. *Insert Temperature (2D Array)*  
   - Insert records directly by specifying year, city, date, and temperature  

5. *Row-Major Traversal*  
   - Displays all stored records row by row (year-wise first)  

6. *Column-Major Traversal*  
   - Displays all stored records column by column (city-wise first)  

7. *Handle Sparse Data*  
   - Prints all positions where data is missing (temperature = -9999)  

8. *Complexity Analysis*  
   - Theoretical and actual time/space complexities are shown  
   - Insert/Delete/Retrieve â†’ *O(1)*  
   - Traversals â†’ *O(years Ã— cities)*  
   - Storage â†’ *O(years Ã— cities)*  

---

## 5. Complexity Summary
*Time Complexity:*  
- Insert/Delete/Retrieve = *O(1)*  
- Row/Column Traversal = *O(years Ã— cities)*  

*Space Complexity:*  
- Array size = *(years Ã— cities) cells*  

---

## 6. Conclusion
This program demonstrates how an *ADT* and *2D array storage* can be used together to efficiently manage weather data.  
It provides complete operations for *insertion, deletion, retrieval, and traversal* while also handling *sparse data* and analyzing *time/space complexity*.  

---
